#!/bin/bash

Role=
RoleComps=()
PrintfMaxLen=15
FInstOpt="/etc/csphere/inst-opts.env"
AgentComps=(
	"-"				"csphere-prepare"		"-"
	"etcd"			"csphere-etcd2-agent"	"etcd2" 
	"skydns"		"csphere-skydns"		"skydns"
	"docker-ipam"	"csphere-dockeripam"	"net-plugin"
	"docker"		"csphere-docker-agent"	"docker"
	"agent"			"csphere-agent"			"csphere"
)
CtlComps=(
	"-"				"csphere-prepare"			"-"
	"prometheus"	"csphere-prometheus"		"prometheus"
	"mongodb"		"csphere-mongodb"			"mongod"
	"etcd"			"csphere-etcd2-controller"	"etcd2"
	"docker"		"csphere-docker-controller" "docker"
	"agent"			"csphere-agent"				"csphere"
	"controller"	"csphere-controller"		"csphere"
)

isRepl() {
		local host="127.0.0.1"
        local output
        output=$( mongo --eval "tojson(rs.status())" $host 2>&1 )
        if [ $? -ne 0 ]; then
                return 2  # mongo error
        fi
        if echo -e "${output}" | grep -E -q "errmsg.+not running with --replSet"; then
                return 1  # not replset
        fi
        return 0          # is replset
}

# append component monitor
if isRepl; then
	CtlComps=(  ${CtlComps[*]}
	"monitor"	"csphere-monitor" 		"csphere-monitor"
	)
fi

# Def
echo_green() {
  local content=$*
  echo -e "\033[1;32m${content}\033[0m\c "
}
echo_yellow() {
  local content=$*
  echo -e "\033[1;33m${content}\033[0m\c "
}
echo_red() { 
  local content=$* 
  echo -e "\033[1;31m${content}\033[0m\c "
}
echo_line() {
  local line="---------------------"
  if test "${1}" ; then
  	echo -en "\n\n${1}\n${line}\n"
  else
	echo -en "${line}\n"
  fi
}

show_help() {
cat << EOF

   $(echo_green "Help:")
	help
	start		[proc]
	stop		[proc]
	status		[proc]
	restart		[proc]
	?		show alias
	logs        proc
	snap

EOF
exit 0
}

show_alias() {
cat << EOF

   $(echo_green "Alias:")
	start	   => 	a
	stop	   => 	z, kill, k
	status	   =>	s, watch, w
	restart	   =>	r

EOF
}

# $1 contains $2 or not
#
sub_str() {  
  [ "${1#*$2*}" == "$1" ] && return 1 || return 0
}

secs2dur() {
	local d=0 h=0 m=0 s=0 secs=$1
	if [ -z "${secs//[ ]}" -o -n "${secs//[0-9]}" ]; then
		return
	fi
	d=$(( $secs / 86400 ))
	h=$(( ($secs-$d*86400) / 3600 ))
	m=$(( ($secs-$d*86400-$h*3600) / 60 ))
	s=$(( $secs-$d*86400-$h*3600-$m*60 ))
	local r=
	if [ $d -ne 0  ]; then
		r="${r}${d}d"
	fi
	if [ $h -ne 0 ]; then
		[ "$r" == "" ] && r="${h}h" || r="${r},${h}h"
	fi
	if [ $m -ne 0 ]; then
		[ "$r" == "" ] && r="${m}m" || r="${r},${m}m"
	fi
	if [ $s -ne 0 ]; then
		[ "$r" == "" ] && r="${s}s" || r="${r},${s}s"
	fi
	echo -en "${r}"
}

is_comp() {
	[ "$1" == "" ] && return 1
	for((i=0;i<${#RoleComps[*]};i+=3));do
		if [ "$1" == "${RoleComps[$i]}" ]; then
			return 0
		fi
	done
	return 1
}

get_comp() {
	for((i=0;i<${#RoleComps[*]};i+=3));do
		if [ "$1" == "${RoleComps[$i]}" ]; then
			echo "${RoleComps[$i]}" "${RoleComps[$(($i+1))]}" "${RoleComps[$(($i+2))]}"
		fi
	done
}

get_pid(){
	echo -en "$(systemctl show ${1} -p MainPID | awk -F= '{print $2;exit}')"
}

startat(){
	echo -en "$(systemctl show ${1} -p ActiveEnterTimestamp | awk -F= '{print $2;exit}')"
}

deadat() {
	echo -en "$(systemctl show ${1} -p InactiveEnterTimestamp | awk -F= '{print $2;exit}')"
}

secs() {
	local t=$(date -d "$1" +%s 2>&-)
	local n=$(date +%s 2>&-)
	if [ -z "${t//[ ]}" -o -n "${t//[0-9]}" -o -z "${n//[ ]}" -o -n "${n//[0-9]}" ]; then
		return
	fi
	local r=$(($n-$t))
	echo ${r#-} # abs()
}

get_fdsum() {
	echo -en "$(/bin/ls /proc/${1}/fd 2>&- | wc -l)"
}

is_running(){
	local comp=$1 pname=$2
	local pid= rc=

	pid=$(get_pid "${comp}")
  	if [ -d "/proc/${pid}/" ]; then
		local cmdline=$(cat "/proc/${pid}/cmdline" 2>&-)
		if sub_str "${cmdline}" "${pname}";  then
			return 0	# running
		else
			return 2	# fake?
		fi
	else
		return	1		# dead
  	fi
}

start_comp() {
	local dname=$1 comp=$2 pname=$3
	
	if [ "${dname}" == "-" ]; then
		echo -e "Starting ${comp} ... $(echo_yellow "SKIP")"
		return 0
	fi

	echo -en "Starting ${dname} ... "
	if is_running "${comp}" "${pname}"; then
		echo -e "$(echo_yellow "SKIP")"
		return 0
	else
		systemctl start "${comp}"
		wait; sleep 1
		if is_running "${comp}" "${pname}"; then 
			echo -e "$(echo_green "OK")"
			return 0
		else
			echo -e "$(echo_red "FAIL")"
			return 1
		fi
	fi
}

stop_comp(){
	local dname=$1 comp=$2 pname=$3

	if [ "${dname}" == "-" ]; then
		echo -e "Stoping ${comp} ... $(echo_yellow "SKIP")"
		return 0
	fi

	echo -en "Stoping ${dname} ... "
	if is_running "${comp}" "${pname}"; then 
		systemctl stop "${comp}"
		wait; sleep 1
		if is_running "${comp}" "${pnaem}"; then
			echo -e "$(echo_red "FAIL")"
			return 1
		else
			echo -e "$(echo_green "OK")"
			return 0
		fi
	else
		echo -e "$(echo_yellow "SKIP")"
		return 0
	fi
}

start(){
  for ((i=0;i<${#RoleComps[*]};i++))
  do
	if (($i%3 == 0)); then
		start_comp ${RoleComps[$i]} ${RoleComps[$(($i+1))]} ${RoleComps[$(($i+2))]}
	fi
  done
}

stop(){
  for ((i=0;i<${#RoleComps[*]};i++))
  do
	if (($i%3 == 0)); then
		stop_comp ${RoleComps[$i]} ${RoleComps[$(($i+1))]} ${RoleComps[$(($i+2))]}
	fi
  done
}

status(){

  single(){
	local dname=$1 comp=$2 pname=$3
	local plen=${#dname}
	local rc=
	
	if [  $# -lt 3 ] || [ "${dname}" == "-" ]; then
		return
	fi

 	local len=$(($PrintfMaxLen-$plen))

  	is_running "${comp}" "${pname}"
  	rc=$?
  	if [ "$rc" == "0" ]; then
		local pid=$(get_pid "${comp}")
		local uptime=$( secs2dur $(secs "$(startat "${comp}")") )
		local fdsum=$(get_fdsum "${pid}")
		local pstree=$(pstree "${pid}")
		local pln=$(echo -e "${pstree}" | awk 'END{print NR}')
		if [ $pln -gt 1 ]; then
			local l1=$( echo -e "${pstree}" | awk '(NR==1){print}' )
			printf "${dname} %-${len}s $(echo_green "running") ${pid} ${l1} [uptime:${uptime} fds:${fdsum}]\n"
			echo -e "${pstree}" | awk '(NR>1){print}' | while read l
			do
				printf "%-$(($PrintfMaxLen+2+7+1+${#pid}))s ${l}\n"
			done
		else
			printf "${dname} %-${len}s $(echo_green "running") ${pid} ${pstree} [uptime:${uptime} fds:${fdsum}]\n"
		fi
  	elif [ "$rc" == "1" ]; then
		local downtime=$( secs2dur $(secs "$(deadat "${comp}")") )
		printf "${dname} %-${len}s $(echo_red "dead") [downtime:${downtime}]\n"
  	elif [ "$rc" == "2" ]; then
		local uptime=$( secs2dur $(secs "$(startat "${comp}")") )
		local fdsum=$(get_fdsum "${pid}")
		printf "${dname} %-${len}s $(echo_yellow "fake?") [uptime:${uptime} fds:${fdsum}]\n"
  	fi

	return $rc
  }

  if [ "$#" == "0" ]; then
	for ((i=0;i<${#RoleComps[*]};i+=3))
  	do
		single $(get_comp "${RoleComps[$i]}")
  	done
  else
	single $(get_comp "$1")
  fi
}

nodeid(){
	local id="unknown"
	if [ -e /etc/.csphere-uuid ]; then
		read id < /etc/.csphere-uuid
	fi
	echo -e "${id}"
}

snap_state(){

	local destdir=$(mktemp -d --suffix="-${COS_ROLE}")
	local args=( $* )
	local destname="/tmp/${COS_ROLE}-$(nodeid).tar.gz"
	if [ ${#args[*]} -eq 0 ]; then
		args=( "-n" "300" "--no-tail" )
	fi


	(
		cd "${destdir}"

		tar -c --exclude=frontend* -zf etc-csphere.tgz /etc/csphere/
		tar -czf etc-systemd-network.tgz /etc/systemd/network/

		cp /var/lib/coreos-install/user_data .

		cp /etc/os-release  .
		cp /proc/meminfo /proc/cpuinfo /proc/loadavg .
		cp /proc/mounts  /proc/cmdline /proc/diskstats .
		dmesg  > dmesg
		uptime > uptime
		( df -Th; df -Ti ) > df
		top -n 2 -d 1 -b > top

		/usr/bin/csphere -v > csphere.version
		/usr/bin/net-plugin  -v > net-plugin.version
		/usr/bin/docker version > docker.version
		/usr/bin/docker info > docker.info

		etcdctl member list > etcd.member.list
		etcdctl cluster-health  > etcd.cluster-health

		journalctl /usr/bin/etcd2 ${args[*]} > etcd2
		journalctl /usr/bin/docker ${args[*]} > docker
		journalctl /usr/bin/skydns ${args[*]} > skydns
		journalctl /usr/bin/prometheus ${args[*]} > prometheus

		journalctl -u csphere-dockeripam ${args[*]} > net-plugin
		journalctl -u csphere-agent ${args[*]} > csphere.agent
		journalctl -u csphere-controller ${args[*]} > csphere.controller

		tail -n 300 /data/logs/mongodb.log > mongodb

		cd ..
		tar -c --remove-files -zf "${destname}" "${destdir##*/}"

	) 2>/dev/null

	echo -e "${destname}"
}


### Main Body Begin

# 0. check root privileges or not ?
if [ "$(id -u)" != "0" ]; then
  echo_red "root privilege required!";echo
  exit 1
fi

# 1. set global role
. ${FInstOpt} 2>/dev/null
case "${COS_ROLE}" in
	"controller")
		Role="${COS_ROLE}"
		RoleComps=( ${CtlComps[*]} )
		;;
	"agent")
		Role="${COS_ROLE}"
		RoleComps=( ${AgentComps[*]} )
		;;
	*)
		echo_red "unknown role: [$COS_ROLE]"; echo
		exit 1
		;;
esac


# 2. process args
if [ "$1" == "snap" ]; then
	shift
	snap_state $*
	exit $?
fi

case "$#" in  
"0")
	show_help	;;
"1")
        arg1=$1;

	case "$arg1" in
	"help"|"h")
		show_help    		;;

	"?"|"/?")
		show_alias			;;

	"start"|"a")
		start
		wait
		echo_line "${Role^} Status:"
		status
		echo_line
						;;
	"stop"|"kill"|"k"|"z")
		stop
		wait
		echo_line "${Role^} Status:"
		status
		echo_line
						;;
	"status"|"watch"|"s"|"w")
		echo "${Role^} Status:"
		echo_line
		status				
		echo_line			;;

	"restart"|"r")
		stop
		sleep 1
		start
		echo_line "${Role^} Status:"
		status
		echo_line			;;

	*)
		show_help			;;
	esac
	;;
"2")
	arg1=$1; arg2=$2

	if ! is_comp "${arg2}"; then
		echo "$(echo_yellow "${arg2}") not component"
		exit 1
	fi

	case "$arg1" in
	"start"|"a")
		start_comp $(get_comp "${arg2}")
						;;
	"stop"|"kill"|"k"|"z")
		stop_comp  $(get_comp "${arg2}")
						;;
	"status"|"watch"|"s"|"w")
		status "${arg2}"
						;;
	"restart"|"r")
		stop_comp  $(get_comp "${arg2}")
		sleep 1
		start_comp $(get_comp "${arg2}")
						;;
	"logs"|"l")
		shift 2;
		comp=( $(get_comp "${arg2}") )
		journalctl -u "${comp[1]}"
						;;
	*)
		show_help			;;
	esac
	;;
*)
	arg1=$1; arg2=$2

	if ! is_comp "${arg2}"; then
		echo "$(echo_yellow "${arg2}") not component"
		exit 1
	fi

	case "$arg1" in
		"logs"|"l")
			shift 2;
			comp=( $(get_comp "${arg2}") )
			journalctl -u "${comp[1]}" $*
			;;
		*)
		show_help		;;
	esac
	;;
esac
